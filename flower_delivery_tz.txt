
### Часть 1: Общая информация и требования

```plaintext
### FlowerDelivery Master
### Техническое задание

#### Сайт с доставкой цветов и получение заказов через Telegram бота

---

### Цель проекта:
Создание веб-сайта для заказа доставки цветов с мастерской интеграцией заказов через Telegram бота.

### Общая информация о проекте:
Проект включает разработку веб-сайта для заказа цветов и мощного Telegram бота для приема и управления заказами с поддержкой аналитики.

### Область применения:
#### Описание проблемы:
Необходимость удобного и быстрого способа заказа цветов через интернет и мессенджер.

#### Пользователи системы:
Частные лица и компании.

#### Основные ограничения и допущения:
Пользователи должны иметь доступ к интернету и Telegram. Заказы принимаются только в рабочее время.

### Функциональные требования:

#### Веб-сайт:
- Регистрация и авторизация пользователей.
- Просмотр каталога цветов.
- Выбор цветов и добавление в корзину.
- Оформление заказа с указанием данных для доставки.
- Просмотр истории заказов.
- Аккаунт администратора для отметки статуса заказа.
- Возможность повторного заказа той же позиции из каталога.
- Поддержка отзывов и рейтингов.
- Аналитика и отчеты по заказам.
- Сайт на русском языке

#### Telegram бот:
- Получение заказов с информацией о букетах и доставке.
- Уведомления о статусе заказа.
- Аналитика и отчеты по заказам.

### Дополнительно:

#### Инструменты разработки:
- Разработка в среде PyCharm.
- Использование aiogram для создания Telegram бота.
- Бот будет работать в режиме Webhook.
- Хранение токенов и конфигурационных данных в файле config.json.
```

### Часть 2: Структура проекта и настройки

```plaintext
### Структура проекта

```plaintext
flower_delivery/
├── flower_delivery/
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
├── orders/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── bot.py
│   ├── forms.py
│   ├── models.py
│   ├── signals.py
│   ├── tests.py
│   ├── views.py
│   ├── urls.py
│   ├── migrations/
│   │   ├── __init__.py
├── templates/
│   ├── orders/
│   │   ├── base.html
│   │   ├── product_list.html
│   │   ├── product_detail.html
│   │   ├── order_form.html
│   │   ├── order_detail.html
│   │   ├── review_form.html
├── static/
│   ├── styles.css
├── manage.py
├── requirements.txt
├── config.json
```

### Описание содержимого файлов

#### `flower_delivery/settings.py`

```python
import os
import json
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

with open(os.path.join(BASE_DIR, 'config.json')) as config_file:
    config = json.load(config_file)

SECRET_KEY = config.get('secret_key', 'django-insecure-)m*(m4k=ee(*m8gpbmp2t-(6v)p%w4d%7@w2)@uj@5s3+4_b&(')
DEBUG = config.get('debug', False)
ALLOWED_HOSTS = config.get('allowed_hosts', ['fd.vivikey.tech'])

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'orders.apps.OrdersConfig',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'flower_delivery.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'flower_delivery.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'ru-RU'
TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_L10N = True
USE_TZ = True

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
}

AIORGRAM_API_TOKEN = config['telegram_token']
WEBHOOK_URL = config['webhook_url']

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SECURE_SSL_REDIRECT = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
```
```

### Часть 3: Модели, сигналы и бот

```plaintext
#### `orders/models.py`

```python
from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver

class Product(models.Model):
    name = models.CharField("Название", max_length=100)
    price = models.DecimalField("Цена", max_digits=10, decimal_places=2)
    image = models.ImageField("Изображение", upload_to='products/')

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "Продукт"
        verbose_name_plural = "Продукты"

class Order(models.Model):
    STATUS_CHOICES = [
        ('P', 'Ожидает'),
        ('C', 'Завершен'),
        ('F', 'Неудачно'),
    ]

    user = models.ForeignKey(User, verbose_name="Пользователь", on_delete=models.CASCADE)
    products = models.ManyToManyField(Product, verboseвание="Продукты", through='OrderProduct')
    status = models.CharField("Статус", max_length=1, choices=STATUS_CHOICES, default='P')
    created_at = models.DateTimeField("Дата создания", auto_now_add=True)

    def __str__(self):
        return f"Заказ {self.id} от {self.user.username}"

    class Meta:
        verbose_name = "Заказ"
        verbose_name_plural = "Заказы"

class OrderProduct(models.Model):
    order = models.ForeignKey(Order, verboseание="Заказ", on_delete=models.CASCADE)
    product = models.ForeignKey(Product, verboseание="Продукт", on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField("Количество")

    def __str__(self):
        return f"{self.quantity} x {self.product.name}"

    class Meta:
        verbose_name = "Продукт заказа"
        verbose имя_plural = "Продукты заказа"

class Review(models.Model):
    user = models.ForeignKey(User, verboseание="Пользователь", on_delete=models.CASCADE)
    product = models.ForeignKey(Product, verboseание="Продукт", on_delete=models.CASCADE)
    rating = models.PositiveIntegerField("Рейтинг")
    comment = models.TextField("Комментарий")
    created_at = models.DateTimeField("Дата создания", auto_now_add=True)

    def __str__(self):
        return f"Отзыв {self.id} от {self.user.username}"

    class Meta:
        verbose имя = "Отзыв"
        verbose имя_plural = "Отзывы"

class Report(models.Model):
    date = models.DateField("Дата")
    total_sales = models.DecimalField("Общие продажи", max_digits=10, decimal_places=2)
    total_orders = models.PositiveIntegerField("Общее количество заказов")

    def __str__(self):
        return f"Отчет за {self.date}"

    class Meta:
        verbose имя = "Отчет

"
        verbose имя_plural = "Отчеты"

@receiver(post_save, sender=Order)
def order_status_change(sender, instance, **kwargs):
    if kwargs.get('created', False):
        notify_new_order(instance)
```

#### `orders/signals.py`

```python
from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Order
from .bot import notify_new_order

@receiver(post_save, sender=Order)
def send_order_notification(sender, instance, created, **kwargs):
    if created:
        notify_new_order(instance)
```

#### `orders/apps.py`

```python
from django.apps import AppConfig

class OrdersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'orders'

    def ready(self):
        import orders.signals
```

#### `orders/bot.py`

```python
import json
import os
import logging
import django
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.strategy import FSMStrategy
from orders.models import Product, Order, OrderProduct

# Установка переменной окружения для настройки Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')
django.setup()

with open(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'config.json')) as config_file:
    config = json.load(config_file)

API_TOKEN = config['telegram_token']
WEBHOOK_URL = config['webhook_url']

# Настройка логирования
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage, fsm_strategy=FSMStrategy(user=True))

# Настройка middleware для логирования
dp.update.middleware(logging)

@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("Привет! Я бот для заказа цветов. Вы можете посмотреть наш каталог и сделать заказ.")

@dp.message(Command("catalog"))
async def send_catalog(message: Message):
    products = Product.objects.all()
    response = "Каталог продуктов:\n"
    for product in products:
        response += f"{product.name} - {product.price} руб.\n"
    await message.answer(response)

@dp.message(Command("order"))
async def create_order(message: Message):
    args = message.text.split()[1:]
    if len(args) != 2:
        await message.answer("Используйте команду в формате /order <product_id> <quantity>")
        return
    product_id, quantity = map(int, args)
    product = Product.objects.get(id=product_id)
    order = Order(user_id=message.from_user.id)
    order.save()
    order_product = OrderProduct(order=order, product=product, quantity=quantity)
    order_product.save()
    await message.answer(f"Заказ на {quantity} x {product.name} успешно создан!")

async def notify_new_order(order):
    message = f"Новый заказ №{order.id}\nПользователь: {order.user.username}\nСтатус: {order.get_status_display()}\n"
    message += "Продукты:\n"
    for order_product in order.orderproduct_set.all():
        message += f"{order_product.quantity} x {order_product.product.name}\n"
    await bot.send_message(chat_id=YOUR_CHAT_ID, text=message)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
```
```

### Часть 4: Шаблоны

```plaintext
### Шаблоны

#### `templates/orders/base.html`

```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}FlowerDelivery{% endblock %}</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'styles.css' %}">
</head>
<body>
    <header>
        <h1><a href="{% url 'product_list' %}">FlowerDelivery</a></h1>
    </header>
    <main>
        {% block content %}
        {% endblock %}
    </main>
    <footer>
        <p>&copy; 2024 FlowerDelivery</p>
    </footer>
</body>
</html>
```

#### `templates/orders/product_list.html`

```html
{% extends 'orders/base.html' %}

{% block title %}Каталог продуктов{% endblock %}

{% block content %}
<h2>Каталог продуктов</h2>
<ul>
    {% for product in products %}
        <li>
            <a href="{% url 'product_detail' pk=product.pk %}">{{ product.name }}</a> - {{ product.price }} руб.
        </li>
    {% endfor %}
</ul>
{% endblock %}
```

#### `templates/orders/product_detail.html`

```html
{% extends 'orders/base.html' %}

{% block title %}{{ product.name }}{% endblock %}

{% block content %}
<h2>{{ product.name }}</h2>
<p>Цена: {{ product.price }} руб.</p>
<img src="{{ product.image.url }}" alt="{{ product.name }}">
<h3>Отзывы</h3>
<ul>
    {% for review in reviews %}
        <li>
            <strong>{{ review.user.username }}</strong>: {{ review.comment }} ({{ review.rating }} из 5)
        </li>
    {% endfor %}
</ul>
<h3>Добавить отзыв</h3>
<form method="post" action="{% url 'add_review' product_id=product.id %}">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Добавить</button>
</form>
<h3>Заказать</h3>
<form method="post" action="{% url 'order_create' product_id=product.id %}">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Заказать</button>
</form>
{% endblock %}
```

#### `templates/orders/order_form.html`

```html
{% extends 'orders/base.html' %}

{% block title %}Оформление заказа{% endblock %}

{% block content %}
<h2>Оформление заказа на {{ product.name }}</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Оформить заказ</button>
</form>
{% endblock %}
```

#### `templates/orders/order_detail.html`

```html
{% extends 'orders/base.html' %}

{% block title %}Заказ №{{ order.id }}{% endblock %}

{% block content %}
<h2>Заказ №{{ order.id }}</h2>
<p>Пользователь: {{ order.user.username }}</p>
<p>Статус: {{ order.get_status_display }}</p>
<p>Дата создания: {{ order.created_at }}</p>
<h3>Продукты</h3>
<ul>
    {% for order_product in order.orderproduct_set.all %}
        <li>{{ order_product.quantity }} x {{ order_product.product.name }}</li>
    {% endfor %}
</ul>
{% endblock %}
```

#### `templates/orders/review_form.html`

```html
{% extends 'orders/base.html' %}

{% block title %}Добавить отзыв{% endblock %}

{% block content %}
<h2>Добавить отзыв для {{ product.name }}</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Добавить отзыв</button>
</form>
{% endblock %}
```

#### `static/styles.css`

```css
body {
    font-family: Arial, sans-serif;
}

header, footer {
    background-color: #f8f9fa;
    padding: 10px;
    text-align: center;
}

main {
    padding: 20px;
}

h1 a {
    text-decoration: none;
    color: #007bff;
}

h1 a:hover {
    text-decoration: underline;
}

ul {
    list-style-type: none;
    padding: 0;
}

ul li {
    margin-bottom: 10px;
}

button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}
```
```

